#pragma once

#ifdef UNIT_TEST
#include "FakeArduino.h"
#else
#include <Arduino.h>
#endif

#include "Queue.h"

#define PI 3.141592


namespace smm {
   class LowPassFilter {
   public:
      LowPassFilter(double cutoffFrequency)
	 : prevTime(millis()), f_c(cutoffFrequency), val(0) {}

      void push(double value) {
	 long time = millis();
	 double dt = double(time - prevTime)/1000;
	 prevTime = time;
	 
	 double a = alpha(dt);
	 val = a*value + (1-a)*val;
      }
      double value() { return val; }
   private:
      long prevTime;
      double f_c, val;

      double alpha(double dt) {
	 return (2*PI*dt*f_c)/((2*PI*dt*f_c) + 1);
      }
   };

  class RollingMaximum {
  public:
    RollingMaximum(double memoryTime, double maxSampleRate) : queue(memoryTime * maxSampleRate) {}

    
    void push(double value) {
      unsigned long minTimestamp = millis() - (1000 * memoryTime);
      while(queue.size() > 0 && (queue.front().timestamp < minTimestamp || queue.front().value < value)) {
	queue.pop();
      }
      
      struct Timepoint pt;
      pt.timestamp = millis();
      pt.value = value;
      queue.push(pt);
    }
    
    double value() {
      return queue.front().value;
    }
  private:
    struct TimePoint {
      unsigned long timestamp;
      double value;
    };

    smm::Queue<struct TimePoint> queue;
  };
}
