#include <vector>
#include <math.h>
#include <stdio.h>

#define PI 3.141592

#include "minunit.h"
#include "suites.h"
#include "FakeArduino.h"
#include "Signal.h"


#define WAVE_LEN 1000
const double dt = 0.001;


static mu_test lowpass_10Hz();


void LowPassFilter_tests()
{
   mu_run_test("measure the amplitudes of test signals for a filter with 10 Hz cutoff",
	       lowpass_10Hz);
}


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *
 * Utility functions for dealing 
 * with waves
 *
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

static std::vector<double> generate_wave(double frequency,
					 double amplitude=1,
					 double phase=0)
{
   std::vector<double> wave;
   for (int i=0; i<WAVE_LEN; i++) {
      double signal = amplitude * cos(2*PI*frequency * ((dt*i) + phase));
      wave.push_back(signal);
   }

   return wave;
}


static double expected_amplitude(double f_signal, double f_cutoff)
{
   const double a = f_signal/f_cutoff;
   return 1/sqrt(a*a + 1);
}


static bool within_percent(double a, double b, double percent)
{
   const double c = abs(1 - (a/b));     // fractional difference
   return (100*c) <= percent;
}


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

mu_test lowpass_10Hz()
{
   const double f_c = 10; //Hz
   const double f_sig1 = 3; //Hz

   std::vector<double> input = generate_wave(f_sig1);

   smm::LowPassFilter filter1(f_c);

   double outputMax = 0;

   for (int i=0; i<WAVE_LEN; i++) {
      filter1.push(input[i]);
      delay(dt * 1000);
      if (filter1.value() > outputMax)
	 outputMax = filter1.value();
   }

   double expectedMax = expected_amplitude(f_sig1, f_c);
   printf("%f <=> %f\n", outputMax, expectedMax);
   mu_assert(within_percent(outputMax, expectedMax, 5),
	     "output amplitude 1 is incorrect!"
	     );

   const double f_sig2 = 10;
   input = generate_wave(f_sig2);
   smm::LowPassFilter filter2(f_c);
   outputMax = 0;

   for (int i=0; i<WAVE_LEN; i++) {
      filter2.push(input[i]);
      delay(dt * 1000);
      if (filter2.value() > outputMax)
	 outputMax = filter2.value();
   }

   expectedMax = expected_amplitude(f_sig2, f_c);
   printf("%f <=> %f\n", outputMax, expectedMax);
   mu_assert(within_percent(outputMax, expectedMax, 5),
	     "output amplitude 2 is incorrect!"
	     );


   const double f_sig3 = 25;
   input = generate_wave(f_sig3);
   smm::LowPassFilter filter3(f_c);
   outputMax = 0;

   for (int i=0; i<WAVE_LEN; i++) {
      filter3.push(input[i]);
      delay(dt * 1000);
      if (filter3.value() > outputMax)
	 outputMax = filter3.value();
   }

   expectedMax = expected_amplitude(f_sig3, f_c);
   printf("%f <=> %f\n", outputMax, expectedMax);
   mu_assert(within_percent(outputMax, expectedMax, 5),
	     "output amplitude 3 is incorrect!"
	     );   

   
   return 0;
}
